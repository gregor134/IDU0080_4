
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ttu.idu0080.order.server;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import ttu.idu0080.order.server.model.OrderShipment;

/**
 * This class was generated by Apache CXF 3.1.11
 * 2017-05-01T17:54:56.552+03:00
 * Generated source version: 3.1.11
 * 
 */

@javax.jws.WebService(
                      serviceName = "OrderShipmentServiceService",
                      portName = "OrderShipmentServicePort",
                      targetNamespace = "http://server.order.idu0080.ttu/",
                      wsdlLocation = "file:/C:/Projektid/IDU0080_4/BPServer/WebContent/order_shipments_1.wsdl",
                      endpointInterface = "ttu.idu0080.order.server.OrderShipmentService")
                      
public class OrderShipmentServiceImpl implements OrderShipmentService {

    private static final Logger LOG = Logger.getLogger(OrderShipmentServiceImpl.class.getName());

    /* (non-Javadoc)
     * @see ttu.idu0080.order.server.OrderShipmentService#getOrderShipmentsByOrderIdRyhmName(int orderId, java.lang.String ryhmName)*
     */
    public java.util.List<ttu.idu0080.order.server.OrderShipment> getOrderShipmentsByOrderIdRyhmName(int orderId, java.lang.String ryhmName) { 
        LOG.info("Executing operation getOrderShipmentsByOrderIdRyhmName");
        System.out.println(orderId);
        System.out.println(ryhmName);
        try {
        	EntityManagerFactory factory = Persistence.createEntityManagerFactory("BPServer");
        	EntityManager em = factory.createEntityManager();
        	
        	List<ttu.idu0080.order.server.model.OrderShipment> orderShipments = em.createNamedQuery("OrderShipment.findByOrderIdAndRyhmName")
        			.setParameter("orderFk", BigDecimal.valueOf(orderId))
        			.setParameter("ryhmName", ryhmName)
        	        .getResultList();
        	
        	List<ttu.idu0080.order.server.OrderShipment> newOrderShipments = new ArrayList<ttu.idu0080.order.server.OrderShipment>();
        	
        	for (OrderShipment os : orderShipments) {
        		ttu.idu0080.order.server.OrderShipment newOs = new ttu.idu0080.order.server.OrderShipment();
        		
        		GregorianCalendar gc = new GregorianCalendar();
        		gc.setTime(os.getApproxDeliveryDate());
        		XMLGregorianCalendar xmlDate = DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
        		newOs.setApproxDeliveryDate(xmlDate);
        		
        		newOs.setCourierName(os.getCourierName());
        		newOs.setOrder(os.getOrderFk().intValue());
        		newOs.setOrderShipment((int) os.getOrderShipment());
        		newOs.setRyhmName(os.getRyhmName());
        		newOs.setShippingPrice(os.getShippingPrice().setScale(2, RoundingMode.HALF_EVEN).longValue());
        		newOs.setTrackingNumber(os.getTrackingNumber());
        		
        		newOrderShipments.add(newOs);
        	}
        	
        	em.close();
			factory.close();
        	
        	return newOrderShipments;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see ttu.idu0080.order.server.OrderShipmentService#insertOrderShipment(int orderId, java.lang.String ryhmName, java.lang.String trackingNumber, java.lang.String courierName, javax.xml.datatype.XMLGregorianCalendar approxDeliveryDate, double shippingPrice)*
     */
    public int insertOrderShipment(int orderId, java.lang.String ryhmName, java.lang.String trackingNumber, java.lang.String courierName, javax.xml.datatype.XMLGregorianCalendar approxDeliveryDate, double shippingPrice) { 
        LOG.info("Executing operation insertOrderShipment");
        System.out.println(orderId);
        System.out.println(ryhmName);
        System.out.println(trackingNumber);
        System.out.println(courierName);
        System.out.println(approxDeliveryDate);
        System.out.println(shippingPrice);
        try {
        	EntityManagerFactory factory = Persistence.createEntityManagerFactory("BPServer");
        	EntityManager em = factory.createEntityManager();
        	
        	ttu.idu0080.order.server.model.OrderShipment orderShipment = new ttu.idu0080.order.server.model.OrderShipment();
        	orderShipment.setApproxDeliveryDate(approxDeliveryDate.toGregorianCalendar().getTime());
        	orderShipment.setCourierName(courierName);
        	orderShipment.setCreated(new Timestamp(System.currentTimeMillis()));
        	orderShipment.setOrderFk(BigDecimal.valueOf(orderId));
        	orderShipment.setRyhmName(ryhmName);
        	orderShipment.setShippingPrice(BigDecimal.valueOf(shippingPrice));
        	orderShipment.setTrackingNumber(trackingNumber);

			em.getTransaction().begin();
			em.persist(orderShipment);
			em.getTransaction().commit();
			
			em.close();
			factory.close();
			
			return (int) orderShipment.getOrderShipment();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
